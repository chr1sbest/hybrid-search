// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	storage "github.com/chr1sbest/hybrid-search/pkg/storage"
	mock "github.com/stretchr/testify/mock"
)

// TextStore is an autogenerated mock type for the TextStore type
type TextStore struct {
	mock.Mock
}

// Index provides a mock function with given fields: ctx, doc
func (_m *TextStore) Index(ctx context.Context, doc storage.Document) error {
	ret := _m.Called(ctx, doc)

	if len(ret) == 0 {
		panic("no return value specified for Index")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.Document) error); ok {
		r0 = rf(ctx, doc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Search provides a mock function with given fields: ctx, queryText, topK
func (_m *TextStore) Search(ctx context.Context, queryText string, topK int) ([]storage.SearchResult, error) {
	ret := _m.Called(ctx, queryText, topK)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []storage.SearchResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) ([]storage.SearchResult, error)); ok {
		return rf(ctx, queryText, topK)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) []storage.SearchResult); ok {
		r0 = rf(ctx, queryText, topK)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.SearchResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, queryText, topK)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTextStore creates a new instance of TextStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTextStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *TextStore {
	mock := &TextStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
