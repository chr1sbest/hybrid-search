// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	storage "github.com/chr1sbest/hybrid-search/pkg/storage"
	mock "github.com/stretchr/testify/mock"
)

// VectorStore is an autogenerated mock type for the VectorStore type
type VectorStore struct {
	mock.Mock
}

// Query provides a mock function with given fields: ctx, queryText, queryVector, topK
func (_m *VectorStore) Query(ctx context.Context, queryText string, queryVector []float32, topK int) ([]storage.SearchResult, error) {
	ret := _m.Called(ctx, queryText, queryVector, topK)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 []storage.SearchResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []float32, int) ([]storage.SearchResult, error)); ok {
		return rf(ctx, queryText, queryVector, topK)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []float32, int) []storage.SearchResult); ok {
		r0 = rf(ctx, queryText, queryVector, topK)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.SearchResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []float32, int) error); ok {
		r1 = rf(ctx, queryText, queryVector, topK)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: ctx, doc, vector
func (_m *VectorStore) Upsert(ctx context.Context, doc storage.Document, vector []float32) error {
	ret := _m.Called(ctx, doc, vector)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.Document, []float32) error); ok {
		r0 = rf(ctx, doc, vector)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewVectorStore creates a new instance of VectorStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVectorStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *VectorStore {
	mock := &VectorStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
